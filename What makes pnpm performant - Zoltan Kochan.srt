1
00:00:02,166 --> 00:00:02,799
今天你好
hello today

2
00:00:02,800 --> 00:00:05,200
我将谈论PMPM和它的原因。
i'm going to talk about pmpm and the reason

3
00:00:05,200 --> 00:00:06,400
它是如此的性能
it is so performance

4
00:00:07,966 --> 00:00:10,133
我的名字是Zoton Zolton。
my name is zoton zolton question

5
00:00:11,400 --> 00:00:12,600
你在乌克兰吗？
are you in ukraine

6
00:00:13,300 --> 00:00:15,300
目前我的工作有点
currently i work for a bit

7
00:00:16,666 --> 00:00:19,766
的管理。
for on depends management

8
00:00:20,533 --> 00:00:24,466
在这之前，我为 "答案 "工作了大约9年。
before that i worked for just answer for about nine years

9
00:00:24,733 --> 00:00:25,866
从2016年开始
and since 2016

10
00:00:26,600 --> 00:00:29,733
我是pnpm的首席维护者。
i'm the lead maintainer of pnpm

11
00:00:32,066 --> 00:00:35,566
在谈论pnpm之前，让我们简单地谈谈
before talking about pnpm let's briefly talk about

12
00:00:36,100 --> 00:00:38,300
其他nogs软件包管理器
other nogs package managers

13
00:00:39,300 --> 00:00:42,800
npm是第一个，也是
so npm was the first one and

14
00:00:44,266 --> 00:00:46,066
它是最受欢迎的一个
it is the most popular one

15
00:00:47,100 --> 00:00:48,466
在过去，它使用
in the past it used

16
00:00:49,366 --> 00:00:51,799
nesta而不是更多的使用目录结构
nesta not more use directory structure

17
00:00:52,000 --> 00:00:57,400
但是这种结构有很多缺点，比如说
but this structure had many disadvantageslike for instance

18
00:00:57,700 --> 00:01:00,166
许多包是重复的
many packages were duplicated

19
00:01:01,333 --> 00:01:02,733
里面没有模块
inside not modules

20
00:01:02,866 --> 00:01:04,866
还有
and also

21
00:01:06,100 --> 00:01:06,900
的
the

22
00:01:06,966 --> 00:01:09,199
因为它使用了嵌套
because it uses used nesting

23
00:01:09,700 --> 00:01:10,766
的目录
the directory

24
00:01:11,566 --> 00:01:13,366
有时非常深
were sometimes very deep

25
00:01:14,500 --> 00:01:16,366
而在窗口上，有
and on windows there was

26
00:01:20,966 --> 00:01:24,799
窗口上有一个小时的时间
there were windows on one pass hours

27
00:01:26,266 --> 00:01:30,766
为了解决这些问题，npm团队想出了
in order to solve these issues the npm team came up with

28
00:01:32,133 --> 00:01:35,366
一种替代性的非模式结构
an alternative not modus structure

29
00:01:35,766 --> 00:01:36,699
他们称之为
that they called

30
00:01:37,400 --> 00:01:40,333
一个扁平的节点模型或吊挂的节点模型
a flat nod models or a hoisted nod models

31
00:01:41,000 --> 00:01:43,866
他们在npm第三版中推出了这种结构。
and they shipped it in npm version three

32
00:01:45,133 --> 00:01:47,499
在那个时候，Alexander google
around that time alexander google

33
00:01:47,766 --> 00:01:50,966
想出了一个替代方法来解决
came up with an alternative approach to fix the

34
00:01:53,133 --> 00:01:53,933
问题
issues

35
00:01:54,933 --> 00:01:56,899
在嵌套而非模块上
over nested not modules

36
00:01:59,133 --> 00:02:01,999
他的想法是使用模拟链接
his idea was to use sim links

37
00:02:05,266 --> 00:02:07,066
因此，模拟链接允许创建
so sim links allowed to create

38
00:02:08,800 --> 00:02:09,600
像
like

39
00:02:10,100 --> 00:02:12,333
与你的高位嵌套，而不需要
with your tall nesting without

40
00:02:13,900 --> 00:02:16,500
实际上是将目录嵌套到彼此之间
actually nesting directories into each other

41
00:02:17,933 --> 00:02:19,266
这个想法后来被
this idea was then

42
00:02:19,766 --> 00:02:23,899
被ricostacruz借用了，他用同样的方法创建了pnpm
borrowed by ricostacruz and he created pnpm

43
00:02:24,400 --> 00:02:26,466
使用同样的方法，并且
using the same approach and

44
00:02:27,700 --> 00:02:31,400
最近，我加入了pnpm，从那以后
recently afterwards i have joined pnpm and since then

45
00:02:32,266 --> 00:02:34,366
从那时起，我就开始维护它
since then i'm maintaining it

46
00:02:35,700 --> 00:02:36,866
稍后
a bit later

47
00:02:37,600 --> 00:02:42,466
yarn被公开了，yarn是由facebook创建的，以解决
yarn was made public and yarn was created by facebook to solve

48
00:02:43,500 --> 00:02:46,666
npm的一些其他问题，比如
some other issues of npm like

49
00:02:47,466 --> 00:02:49,899
非终点站和速度
non terminus and speed

50
00:02:54,500 --> 00:02:58,533
pm是由无政府组织提供的官方软件包管理器。
and pm is the official package manager shipped by no gs

51
00:02:59,366 --> 00:03:03,066
在过去，它有一些人的问题，我说过
in the past it had man issues and i said

52
00:03:04,266 --> 00:03:06,133
它是非确定性的
it was non deterministic

53
00:03:06,366 --> 00:03:10,799
因为它没有一个锁文件，所以速度极慢
because it did not have a lock file it was extremely slow

54
00:03:11,466 --> 00:03:12,266
而且
and

55
00:03:13,066 --> 00:03:17,599
从最近开始，它就没有单体支持了
it had no monarical support since very recently

56
00:03:19,866 --> 00:03:20,666
在牧师那里
in the pastor

57
00:03:20,666 --> 00:03:24,933
我们管理橡树的不真实的可靠性和PM
we manage oaks about the unreal reliability of and pm

58
00:03:31,333 --> 00:03:33,799
是Facebook创建的纱线
is facebook created yarn

59
00:03:36,133 --> 00:03:39,266
自那时以来，它是由社区维护
since then it is maintained by the community

60
00:03:40,100 --> 00:03:41,500
而且他们已经解决了
and they have solved

61
00:03:42,133 --> 00:03:44,166
了npm的很多问题
a lot of the issues of npm

62
00:03:46,000 --> 00:03:46,733
和
and

63
00:03:46,733 --> 00:03:50,299
我认为它是一段时间内最好的软件包管理器
i think it was the best package manager for some time

64
00:03:53,500 --> 00:03:54,300
从
from

65
00:03:55,366 --> 00:03:59,466
其中，他们想出了一个激进的新方法来解决
in which they came up with a radical anew approach to solve

66
00:03:59,766 --> 00:04:00,666
一些
some of the

67
00:04:01,600 --> 00:04:03,166
的问题
issues with not modules

68
00:04:03,866 --> 00:04:06,066
他们引入了即插即用
they introduced plug and play

69
00:04:06,766 --> 00:04:08,566
默认情况下是打开的
which is on by default

70
00:04:09,266 --> 00:04:10,366
这是一个
this is a

71
00:04:11,400 --> 00:04:12,466
非常有趣的
very interesting

72
00:04:13,266 --> 00:04:14,066
技术
technique

73
00:04:15,166 --> 00:04:18,799
来管理父母，有人喜欢有人不喜欢
to manage the parents some love it some don't

74
00:04:21,733 --> 00:04:25,533
自从第十六个版本以来，Nojs已经在
since version sixteen nojs ships

75
00:04:25,933 --> 00:04:27,399
yarn与corpec
yarn with corpec

76
00:04:31,766 --> 00:04:36,066
以及 pnpm，所以如果你使用 nojs 16th
as well as pnpm so if you use nojs sixteen

77
00:04:36,066 --> 00:04:38,199
你可以将corpic启用并
you can round corpic enable and

78
00:04:38,500 --> 00:04:41,966
yarn和pnpm都可以在你的系统中使用。
both yarn and a pnpm will be available in your

79
00:04:45,300 --> 00:04:47,200
pnpm的创建者是
pin pm was created

80
00:04:48,933 --> 00:04:51,766
完全由开放源代码的贡献者创建
completely by open source contributors

81
00:04:53,500 --> 00:04:55,666
它的开发是
it was developed

82
00:04:56,300 --> 00:04:57,200
围绕着这套
around the set

83
00:04:58,300 --> 00:05:00,333
和yarn同时开发的
around the same time as yarn

84
00:05:00,566 --> 00:05:02,933
所以它不是一个新的软件包管理器，而是
so it's not a new package manager it's

85
00:05:03,100 --> 00:05:05,600
它和yarn一样古老，它实际上是
it's as old as yarn it was actually

86
00:05:07,000 --> 00:05:09,000
比yarn更早公开
public earlier than yarn

87
00:05:11,166 --> 00:05:11,966
而且
and

88
00:05:13,733 --> 00:05:16,733
pnpm被很多伟大的公司所支持
pnpm is supported by a lot of great companies

89
00:05:17,866 --> 00:05:18,899
例如，我的工作
for instance i work

90
00:05:19,533 --> 00:05:20,866
现在有一点
for a bit now and

91
00:05:21,200 --> 00:05:25,100
我的很多日常工作都与pnpm有关
a lot of my day to day tasks are related to pnpm

92
00:05:26,600 --> 00:05:30,366
正如我所说，它是由no js提供的
and as i said it is shipped by no js

93
00:05:31,100 --> 00:05:32,066
通过corpic
through corpic

94
00:05:32,466 --> 00:05:34,566
所以它是一种官方的东西
so it's kind of official

95
00:05:35,266 --> 00:05:38,166
以及yarn也是如此
as well as yarn as well

96
00:05:38,266 --> 00:05:40,199
它有一定的正当性
it has some legitimacy to it

97
00:05:43,766 --> 00:05:45,899
它在过去两年中获得了很大的发展。
it pm pm gains

98
00:05:46,200 --> 00:05:49,366
在过去的两年里获得了大量的人气
gained a lot of popularity in the last two years

99
00:05:49,366 --> 00:05:51,899
你可以看到下载的数量
as you can see the number of downloads

100
00:05:52,600 --> 00:05:54,133
研究的增加
studied increases

101
00:05:54,966 --> 00:05:57,466
而今年我们已经有
and this year we already have

102
00:05:58,166 --> 00:06:01,099
比去年多三倍的下载量
three times more downloads than last year

103
00:06:02,666 --> 00:06:06,766
我们有很多知名的大公司都在使用
and we have a lot of big well known companies that use

104
00:06:07,600 --> 00:06:08,400
pnpm
pnpm

105
00:06:11,766 --> 00:06:13,299
所以我们来谈谈
so let's talk about

106
00:06:13,500 --> 00:06:17,966
这个不是由PNPM创建的模式结构
this not modus structure that is created by pnpm

107
00:06:20,533 --> 00:06:21,266
对不起，我没听清你的名字。
sorry i didn't catch your name e

108
00:06:21,266 --> 00:06:22,966
正如你在左边看到的那样
as you can see on the left

109
00:06:24,800 --> 00:06:28,766
你什么时候有一个项目只有一个
when did you have a project that has only one

110
00:06:29,166 --> 00:06:32,499
单一的直接攻击性表达版本的项目
single direct depensive express version for

111
00:06:33,700 --> 00:06:35,100
如果你运行和pm安装
if you run and pm install

112
00:06:35,533 --> 00:06:37,733
并打开你的正常使用目录
and you open your normal use directory

113
00:06:37,733 --> 00:06:41,533
你会看到所有这些不同的包都在那里，尽管
you will see all these different packages there even though

114
00:06:42,600 --> 00:06:44,333
它们并不在你的部署中
they are not in your depenses

115
00:06:44,766 --> 00:06:47,666
这是因为npm把所有的
this is because npm hoists all the

116
00:06:48,800 --> 00:06:50,333
间接依赖是
indirect depends is

117
00:06:52,600 --> 00:06:53,400
和
and

118
00:06:54,533 --> 00:06:57,566
如果你是在pnpm上安装，并且你打开了node moduce
if you are on pnpm install and your open node moduce

119
00:06:57,566 --> 00:07:01,733
你会看到只有这三个文件点 pnpm
you will see only those three files dot pnpm

120
00:07:01,800 --> 00:07:03,666
dot moducem 和 express
dot moducem and express

121
00:07:03,700 --> 00:07:06,466
而其中两个文件实际上是隐藏文件
and two of these files are actually hidden files

122
00:07:06,700 --> 00:07:09,300
所以你将只得到你的直接依赖关系
so you will only get your direct dependency

123
00:07:09,300 --> 00:07:10,733
在nod模块的根目录下
in the root of nod modules

124
00:07:14,300 --> 00:07:17,766
作为结果，如果你在一个由npm维护的项目中导入cookie
as a result if you will import cookie

125
00:07:18,500 --> 00:07:21,200
在一个由npm维护的项目中
in a project maintained by npm

126
00:07:21,866 --> 00:07:22,966
你的代码就会工作
your code will work

127
00:07:22,966 --> 00:07:26,199
因为cookie是挂在转子上的，而不是挂在moils上的。
because cookie is hoisted to the rotors not moils

128
00:07:27,400 --> 00:07:29,600
而在pnpm中，这将无法工作
with pnpm this won't work

129
00:07:30,300 --> 00:07:32,600
因为cookie是
because cookie is

130
00:07:33,133 --> 00:07:36,866
在某个秘密的地方，我稍后会展示
in some secret placewhere i will show later

131
00:07:37,766 --> 00:07:40,466
但这是一个非常危险的情况，因为
but this is a very dangerous situation because

132
00:07:42,333 --> 00:07:47,666
如果你使用cookie，但不把它添加到你的依赖项中
if you will use cookie but you won't add it to your dependencies

133
00:07:48,266 --> 00:07:51,999
可能会出现这样的情况：在某个较新的版本中，Express
it might happen that express in some newer version

134
00:07:52,000 --> 00:07:55,000
在一个新的补丁版本中会停止使用cookie
in a new patch version will stop using cookie

135
00:07:55,900 --> 00:07:56,700
而
and

136
00:07:57,500 --> 00:07:59,400
结果是它不会
as a result it won't

137
00:07:59,966 --> 00:08:03,666
它不会被提升到转子上，而不是Modus和
it won't be hoisted to the rotor not modus and

138
00:08:04,333 --> 00:08:07,799
而你的代码将被破坏，即使你没有改变任何东西
and your code will break even though you did not change anything

139
00:08:09,566 --> 00:08:11,733
这种情况不会发生，因为
this pm this won't happen because

140
00:08:12,200 --> 00:08:13,600
你将不能够
you won't be able to

141
00:08:15,333 --> 00:08:19,466
需要不在你的依赖关系中的依赖关系。
ever require the dependence that is not in your dependence

142
00:08:21,700 --> 00:08:25,366
但如果不在根中，cookie在哪里呢？
but where is cookie if it's not in the root so actually

143
00:08:25,600 --> 00:08:29,266
它隐藏在这个点 pnpm 之内。
it's hidden inside this dot pnpm further

144
00:08:30,600 --> 00:08:33,366
pnpm将所有的依赖关系
pnpm places all the dependences

145
00:08:34,866 --> 00:08:35,933
直接和在直接
direct and in direct

146
00:08:36,733 --> 00:08:40,566
到dot pnpm内部的一个扁平目录结构中。
to a flat directory structure inside dot pnpm

147
00:08:42,900 --> 00:08:45,766
中的扁平目录结构，而这些依赖关系则被
and the dependences are

148
00:08:46,500 --> 00:08:47,600
链接到
linked into

149
00:08:48,533 --> 00:08:52,333
这个孤立的子文件夹而不是模块文件夹中，使用模拟链接
this isolate sub not modules folders using sim links

150
00:08:52,933 --> 00:08:53,966
所以实际上
so actually the

151
00:08:54,666 --> 00:08:57,666
你在你的根目录中看到的快递
express that you see in the root of your

152
00:08:57,733 --> 00:08:58,399
非模块
non modules

153
00:08:58,400 --> 00:09:01,600
是，它只是一个连接到这个隐藏的Expresswater的缝隙链接
is that it's just a seam link to this hidden expresswater

154
00:09:01,600 --> 00:09:02,933
在pm里面
inside pm

155
00:09:04,566 --> 00:09:06,933
的cookie，而cookie则是
and cookie which is a depense of

156
00:09:07,900 --> 00:09:09,200
Express是
express is

157
00:09:09,466 --> 00:09:13,666
sim链接到express的专用非modus文件夹。
sim linked to the dedicated not modus folder of express

158
00:09:18,466 --> 00:09:19,166
这一点
thisthis

159
00:09:19,166 --> 00:09:23,099
孤立的not modus对单亲家庭来说是非常非常好的。
isolated not modus is very very good for monorepus

160
00:09:25,366 --> 00:09:26,533
与非说唱歌手
with non rappers

161
00:09:27,933 --> 00:09:29,899
如果你使用悬挂式非模态使用
if you use a hoisted non moil use

162
00:09:33,466 --> 00:09:37,666
你的项目将不仅能够使用
your project will be able to use not just the

163
00:09:38,766 --> 00:09:42,766
你的依赖关系的子依赖关系，而且还能使用任何其他项目的
your the sub dependencies of your dependencies but also any

164
00:09:43,100 --> 00:09:45,900
任何其他项目的依赖性
dependencies of any other projects

165
00:09:46,066 --> 00:09:47,333
正如你在这里看到的
as you can see here

166
00:09:48,566 --> 00:09:51,766
who和bar都有一个依赖关系
both who and bar have one dependency

167
00:09:53,200 --> 00:09:55,533
而且这两个依赖项都被
and both of these dependencies are

168
00:09:56,066 --> 00:10:00,166
悬挂在他们的根目录下，而不是君主国的模块目录下
hoisted to their root not modules folder of your monarchy

169
00:10:00,966 --> 00:10:02,166
因此，作为一个结果
so as a result

170
00:10:02,866 --> 00:10:03,666
吧台
bar

171
00:10:04,466 --> 00:10:06,399
将能够导入
will be able to import

172
00:10:06,866 --> 00:10:09,399
的深度，尽管它既不是一个
depth of fu even though it's neither a

173
00:10:09,766 --> 00:10:12,566
直接的北方和间接的依赖关系
direct northern and indirect dependency

174
00:10:13,200 --> 00:10:14,066
吧的
of bar

175
00:10:14,700 --> 00:10:15,500
所以
so

176
00:10:17,266 --> 00:10:18,599
一旦你释放了bar
once you release bar

177
00:10:19,366 --> 00:10:22,699
有人会安装它，它就会立即损坏
and someone will install it it will break immediately

178
00:10:28,166 --> 00:10:32,133
用一个由pnpm创建的孤立的非moduce
with a with an isolated non moduce created by pnpm

179
00:10:32,133 --> 00:10:33,799
这并不是一个问题，因为
this is not a problem because

180
00:10:35,900 --> 00:10:37,266
你只得到你的
you only get your

181
00:10:37,866 --> 00:10:39,733
直接依赖的吊车
direct dependence's hoist

182
00:10:40,466 --> 00:10:42,799
sim链接到nod modus
sim linked to nod modus

183
00:10:43,566 --> 00:10:44,366
而且
and

184
00:10:48,066 --> 00:10:52,199
实际上没有任何东西被浪费到根节点模块的快速文件夹中。
nothing is actually wasted to the root node module's fast folder

185
00:10:53,500 --> 00:10:54,733
你的mono苹果的
of your mono apple

186
00:10:55,200 --> 00:10:56,933
所有的子程序
all the sub depenances

187
00:10:58,300 --> 00:11:01,333
都隐藏在stockpian can文件夹中
are hidden inside the stockpian can folder

188
00:11:03,733 --> 00:11:04,533
所以满
so full

189
00:11:05,566 --> 00:11:06,999
将无法
will not be able to

190
00:11:07,400 --> 00:11:11,466
要求依赖mono应用程序中的其他项目
require depends of other projects in the mono app

191
00:11:16,133 --> 00:11:19,533
你可能会问为什么其他软件包管理器不使用这种方法？
you might ask why other package managers don't use this approach

192
00:11:19,533 --> 00:11:20,333
好吧
well

193
00:11:21,733 --> 00:11:22,533
实际上
actually

194
00:11:23,366 --> 00:11:24,166
pm
pm

195
00:11:26,333 --> 00:11:29,466
想要添加pm start而不是modus目录
wants to add the pm start not modus directory

196
00:11:30,066 --> 00:11:33,699
作为一个选项，因为这个问题是monorepos
as an option because of this issues is monorepos

197
00:11:34,866 --> 00:11:39,466
但这种方法目前有一些缺点，因为
but this approach has some disadvantages currently because

198
00:11:40,133 --> 00:11:43,299
有些脚趾不喜欢simlings，比如react native
some toes don't like simlings like react native

199
00:11:44,266 --> 00:11:47,133
根本就不能和simlings一起工作
doesn't work with simlings at all

200
00:11:49,166 --> 00:11:49,966
和许多
and many

201
00:11:52,266 --> 00:11:54,966
生态系统中的许多包都是
many packages in the ecosystem are

202
00:11:55,766 --> 00:11:57,366
发布的软件包都有这种缺陷
published with this broken

203
00:11:59,566 --> 00:12:01,966
导入语句，导入
import statements that import

204
00:12:03,200 --> 00:12:05,600
间接依赖关系
indirect dependences

205
00:12:06,866 --> 00:12:09,499
所以这些粘性的非模块会被破坏
so these stick non modules breaks

206
00:12:09,966 --> 00:12:10,766
嗯
嗯

207
00:12:14,266 --> 00:12:15,733
破坏了许多软件包
breaks many packages

208
00:12:16,466 --> 00:12:17,299
但是
however

209
00:12:17,933 --> 00:12:18,799
pnpm
pnpm

210
00:12:20,700 --> 00:12:25,700
有一些变通方法，所以你不会有第三个问题。
has some workarounds so you will never have the third issue

211
00:12:26,966 --> 00:12:30,366
如果你必须使用seamlings来工作
and if you have to set on to work with seamlings

212
00:12:30,666 --> 00:12:31,466
那么
then

213
00:12:32,466 --> 00:12:35,566
你可以使用节点链接或吊装吊装设置
you can use the node link or hoisted hoisted setting

214
00:12:35,566 --> 00:12:38,399
并且pnpm将创建一个传统的
and the pmpm will create a traditional

215
00:12:39,366 --> 00:12:41,699
悬挂式或其他被称为
hoisted or otherwise known as

216
00:12:42,166 --> 00:12:43,333
铂金模块
platinum modules

217
00:12:44,133 --> 00:12:47,966
所以，PMPM已经覆盖了你，你可以在任何类型的项目中使用它。
so pmpm has you covered you can use it with any kind of project

218
00:12:52,666 --> 00:12:53,499
另一个问题
another issue

219
00:12:53,700 --> 00:12:57,466
pnpm的另一个原因是它的性能非常好。
another reason pnpm is so performance is because it

220
00:12:58,566 --> 00:13:00,999
非常非常有效地使用这个空间
uses this space very very efficiently

221
00:13:01,466 --> 00:13:05,133
你可能已经注意到，当你使用npm或yarn时，你的非模块会消耗大量的空间。
you might have noticed that your not modules consumes a lot of

222
00:13:05,333 --> 00:13:07,299
你可能已经注意到，当你使用npm或yarn时，你的非模块会消耗很多空间
space when you use npm or yarn

223
00:13:08,266 --> 00:13:10,599
如果你有十几个或二十几个
and if you have like ten or twenty

224
00:13:12,000 --> 00:13:14,866
如果你的电脑上有十个或二十个项目，那么
just with projects on your pc then

225
00:13:16,266 --> 00:13:18,666
如果你的电脑上有十个或二十个项目，那么你的依赖性可能会消耗像10
your depends this might consume like ten

226
00:13:18,666 --> 00:13:20,933
二三十G的空间
twenty thirty gigabytes on this space

227
00:13:21,200 --> 00:13:23,733
这实际上不是pnpm的问题
this is actually not an issue with pnpm

228
00:13:24,533 --> 00:13:26,766
因为pnpm使用一个中央
because pnpm uses a central

229
00:13:27,366 --> 00:13:29,299
内容可寻址存储
content addressable storage

230
00:13:29,800 --> 00:13:33,800
来链接你所依赖的文件，并没有更多的用途。
to link the files of your dependence is not more use

231
00:13:34,600 --> 00:13:37,366
内容可寻址存储器基本上就是
a content addressable storage is basically

232
00:13:37,500 --> 00:13:40,466
一个存储文件的目录
a directory where files are stored

233
00:13:41,466 --> 00:13:43,533
的位置上计算出的
at locations calculated

234
00:13:45,900 --> 00:13:46,766
的位置。
from the

235
00:13:49,700 --> 00:13:51,500
文件的内容计算出来的位置。
contents of these files

236
00:13:52,500 --> 00:13:56,066
这意味着，例如，如果你有三个
this means that for instance if you have three

237
00:13:57,300 --> 00:13:59,266
个版本的软件包
versions of a single package

238
00:14:00,200 --> 00:14:01,800
并且所有这些
and all this

239
00:14:03,600 --> 00:14:06,066
版本的软件包都有一个
versions of the package have a file

240
00:14:06,700 --> 00:14:08,066
没有变化
with no changes

241
00:14:08,866 --> 00:14:10,599
然后pmpm实际上会
and then pmpm will actually

242
00:14:10,866 --> 00:14:15,133
只把这个文件写到磁盘上一次，然后
write this file only once to the disc and

243
00:14:18,466 --> 00:14:19,266
点
point

244
00:14:20,933 --> 00:14:24,499
并且无论何时安装这个软件包
and anytime this packages are installed

245
00:14:25,466 --> 00:14:29,199
它不会创建这个火的新副本
it will not create a new copy of this fires

246
00:14:30,133 --> 00:14:31,699
pmpm将只是创建
pmpm will just create

247
00:14:32,000 --> 00:14:32,533
一个硬
a hard

248
00:14:32,533 --> 00:14:35,999
链接到内容可调存储中的一个位置
link to a single location in the content adjustable storage

249
00:14:39,666 --> 00:14:44,399
所以实际上在你的mod模块中，在这个垂直存储中
so actually inside your mod modules inside this vertical store

250
00:14:45,500 --> 00:14:50,133
每个文件都被指定到中央的一个位置上
every file is just appointed to a location in the central

251
00:14:51,266 --> 00:14:53,099
内容可寻址的存储空间
content adressable store

252
00:14:58,200 --> 00:15:00,333
正如你在这里看到的那样，我们有
as you can see here like we have

253
00:15:01,600 --> 00:15:04,333
项目A和项目B以及
project a and project b and

254
00:15:05,066 --> 00:15:06,366
一些文件
some of the files

255
00:15:06,966 --> 00:15:10,366
在这两个项目中是相同的
in these two projects are the same

256
00:15:12,533 --> 00:15:15,999
所以它们都指向光盘上的同一个位置
so they they point to the same location on the disc

257
00:15:17,733 --> 00:15:18,899
所以我们不需要告诉
so we don't tell

258
00:15:19,333 --> 00:15:23,866
一个文件的两份副本，我们只有一份文件的副本被写入光盘
two copies of a file we have only one copy of the file written

259
00:15:24,400 --> 00:15:25,200
到光盘上
to the disc

260
00:15:29,200 --> 00:15:30,666
因此，当你
as a result when you

261
00:15:33,100 --> 00:15:34,666
每次你在
each time you around

262
00:15:35,133 --> 00:15:37,333
pm安装在一个新项目中
pm install in a new project

263
00:15:39,000 --> 00:15:40,000
pnpm
pnpm

264
00:15:41,600 --> 00:15:45,566
只会在你的磁盘上多消耗一点空间，不像
consumes just a little more space on your disk unlike

265
00:15:45,566 --> 00:15:47,066
npm或yarn
npm or yarn which

266
00:15:48,333 --> 00:15:49,533
你不会使用一个
you don't use a

267
00:15:50,766 --> 00:15:53,066
默认情况下，内容可寻址存储
content addressable store by default

268
00:15:55,900 --> 00:15:58,266
所以你可以看到在第一次安装时
so you can see on the first install

269
00:15:58,800 --> 00:16:03,666
pnpm使用的磁盘空间与按钮的数量差不多
pnpm uses around the same amount of disk space buttons

270
00:16:04,066 --> 00:16:08,166
在随后的项目中，当围绕pnpm安装时，它将
in a subsequent project when around pnpm install it will

271
00:16:09,900 --> 00:16:11,400
它不会再消耗
it will not consume

272
00:16:14,900 --> 00:16:17,333
那巨大的空间
that huge amount of space again

273
00:16:18,800 --> 00:16:21,200
因为这些文件已经在商店里了，而且
because the files are already in the store and

274
00:16:21,466 --> 00:16:24,333
pm只是创建新的硬盘，而不是复制
pm just creates new hardings not copies

275
00:16:27,566 --> 00:16:28,366
实际上，一个
actually a

276
00:16:29,466 --> 00:16:31,533
纱线开始使用
yarn started to use

277
00:16:32,100 --> 00:16:34,333
一个内容可寻址的存储，以及
a content addressable store as well

278
00:16:35,533 --> 00:16:37,699
作为目前的一个OP 10功能
as an op ten feature for now

279
00:16:38,766 --> 00:16:41,333
他们计划在下一个主要版本中使其
and they plan to make it

280
00:16:42,133 --> 00:16:44,866
他们计划在下一个主要版本中默认使用。
on by default in the next major version

281
00:16:50,933 --> 00:16:53,333
如果你看了我们的基准测试
if you have looked at our benchmarks

282
00:16:53,400 --> 00:16:55,700
你可能已经注意到
you have might have noticed that

283
00:16:56,400 --> 00:16:58,700
在某些情况下，pnpm
in some scenarios pnpm is

284
00:17:00,266 --> 00:17:03,166
比npm快好几倍，甚至
several times faster than an npm and even

285
00:17:03,800 --> 00:17:04,966
比yarn快
faster than yarn

286
00:17:07,900 --> 00:17:08,933
这个呃
this uh

287
00:17:11,733 --> 00:17:13,899
pnpm更快的原因是
the reason pnpm is faster is

288
00:17:13,900 --> 00:17:17,366
因为它使用了一种不同的算法来解决和获取
because it uses a different algorithm to resolve and fetch

289
00:17:17,900 --> 00:17:22,566
依赖，所以npm和yarn都有独立的阶段来进行
dependencies so both npm and yarn have separate stages for

290
00:17:23,800 --> 00:17:26,866
第一阶段的安装
installation at the first stage

291
00:17:28,500 --> 00:17:30,933
所有的依赖关系都已解决
all the dependencies are resolved

292
00:17:33,466 --> 00:17:33,666
在
on

293
00:17:33,666 --> 00:17:37,566
第二阶段，所有的防御措施都从注册表中获取。
the second stage all the defenses are fetched from the registry

294
00:17:37,700 --> 00:17:39,800
在最后的第三阶段
and at the last third stage

295
00:17:41,066 --> 00:17:44,099
所有的包都被写入模块中
all the packages are written to not modules

296
00:17:47,500 --> 00:17:49,366
不像pm和
unlike and pm and

297
00:17:50,100 --> 00:17:53,900
yarnpnpm没有这个独立的阶段
yarnpnpm doesn't have this separate stages

298
00:17:54,900 --> 00:17:56,566
它实际上试图在同一时间做
it actually tries to do

299
00:17:57,466 --> 00:17:59,999
所有的事情都在同一时间进行
everything concurrently at the same time

300
00:18:01,766 --> 00:18:02,566
所以
so

301
00:18:04,933 --> 00:18:06,933
当它解决了一个软件包
when it resolves a package

302
00:18:06,933 --> 00:18:09,799
它立即开始从注册表中获取它
it immediately starts to fetch it from the registry

303
00:18:09,800 --> 00:18:13,400
它不会等待所有其他的软件包被解析。
it doesn't wait for all the other packages to be resolved

304
00:18:15,600 --> 00:18:18,666
这是非常有效的，当
this is very efficient and when

305
00:18:20,133 --> 00:18:20,933
时
when

306
00:18:21,266 --> 00:18:22,999
它开始编写
it starts to write

307
00:18:23,600 --> 00:18:26,500
时，快速模式的模块就会立即开始，当它们的最后一个
fast mode modules immediately when they last

308
00:18:29,100 --> 00:18:31,100
包被解决
package is resolved

309
00:18:32,133 --> 00:18:35,899
但它并不等待软件包被取走
but it doesn't wait for packages to be fetched

310
00:18:36,766 --> 00:18:37,566
一些
some

311
00:18:39,566 --> 00:18:40,766
一些软件包正在
some packages are

312
00:18:41,133 --> 00:18:42,133
仍在被取走
still being fetched

313
00:18:42,133 --> 00:18:45,933
而另一些已经被写入非非模块中了
and some others are already written to non non modules

314
00:18:49,000 --> 00:18:51,733
你可能会问为什么其他软件包管理器不
you might ask why other package managers don't

315
00:18:51,900 --> 00:18:54,166
很好地使用这种技术
use this technique well

316
00:18:54,566 --> 00:18:55,366
这听起来是个好主意
that sounds like a great idea

317
00:18:57,200 --> 00:19:01,333
这种算法实际上是非常复杂的，可能
this algorithm actually is very complex and probably

318
00:19:03,000 --> 00:19:05,200
一些软件包管理员更喜欢
some package managers prefer

319
00:19:06,200 --> 00:19:08,000
要慢一点，但要
be a bit slower but to

320
00:19:09,500 --> 00:19:11,766
拥有更容易维护的代码
have code that is easier to maintain

321
00:19:12,866 --> 00:19:15,933
而且对于新的贡献者来说更容易学习
and easier to learn for new contributors

322
00:19:17,100 --> 00:19:20,300
当然还有一些速度上的改进
and some of the speed improvements are of course

323
00:19:21,333 --> 00:19:24,566
因为我们使用了一个内容可寻址存储
possible because we use a content addressable store

324
00:19:25,066 --> 00:19:28,933
因为我们使用了一个可寻址的内容库，而且我们使用了一个不同的正常使用方法来进行重组。
and because we use a different normal use there to restructure

325
00:19:32,266 --> 00:19:36,966
现在这都是关于pnpm的速度，我只想提一下
now this is all about pnpm speed and i just want to mention

326
00:19:40,000 --> 00:19:42,866
可能不是很广泛的pnpm的非功能
probably not wide the non feature of pnpm

327
00:19:43,900 --> 00:19:48,000
你实际上可以用pnpm来管理没有GS的版本
you can actually use pnpm to manage no GS versions

328
00:19:49,166 --> 00:19:54,366
所以你可以用pnpm来代替nvs、nvm或water
so you can use pnpm instead of nvs or nvm or water

329
00:19:54,800 --> 00:19:57,300
有一个命令 pnpm 和 views
there is a command pnpm and views

330
00:19:58,800 --> 00:20:01,866
你可以运行它来安装no js
which you can run to install no js

331
00:20:03,333 --> 00:20:04,999
因此，例如，如果你想
so for instance if you want to

332
00:20:05,800 --> 00:20:09,300
安装no js 16，只需运行p、pm和views即可。
install no js sixteen just run p and pm and views

333
00:20:09,666 --> 00:20:11,199
dash global 16
dash global 16

334
00:20:11,933 --> 00:20:14,666
你就会在你的网站上看到no js sixteen。
and you will have no js sixteen in your

335
00:20:20,700 --> 00:20:25,366
pmpm有很多很多的功能，你可以打开我们的
pmpm has lots lots of features you can open up our

336
00:20:26,900 --> 00:20:30,366
网站 pmpm dot io 并
website pmpm dot io and

337
00:20:30,866 --> 00:20:34,566
打开功能比较页面，你会看到这个表格。
open the feature comparison pageyou will see this table

338
00:20:35,266 --> 00:20:38,533
但你可以看到，我们已经实现了
but you can see that we have implemented

339
00:20:38,566 --> 00:20:40,599
几乎所有的功能，包括
almost all the features that

340
00:20:41,166 --> 00:20:42,599
yarn或npm hell
yarn or npm hell

341
00:20:45,000 --> 00:20:48,566
的所有功能，而且我们拥有yarn和npm hell的所有单元功能。
and we have all unit features that neither yarn

342
00:20:48,566 --> 00:20:50,599
到现在为止，npm也没有
nor npm have as of now

343
00:20:51,266 --> 00:20:53,699
像副作用的现金或
like side effects cashor

344
00:20:55,466 --> 00:20:57,199
管理不只是版本
managing not just versions

345
00:21:05,533 --> 00:21:06,333
谢谢
thanks

346
00:21:06,333 --> 00:21:08,399
谢谢你听我的演讲
for listening to my presentation

347
00:21:09,466 --> 00:21:11,499
请访问pnpm io
please visit pnpm io

348
00:21:11,933 --> 00:21:14,199
给予我们的回帖星
give our reposterior star

349
00:21:14,766 --> 00:21:18,866
并在twitter上关注我们：pnpm js
and also follow us on twitter at pnpm js

350
00:21:19,000 --> 00:21:22,066
并在twitter上关注我，我是一个思考问题的人。
and follow me on twitter i'm a thought on the question

351
00:21:23,066 --> 00:21:24,866
谢谢你，再见
thanks bye

